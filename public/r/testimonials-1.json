{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "testimonials-1",
  "type": "registry:component",
  "title": "Testimonials 1",
  "author": "Sam Giustizia",
  "description": "Testimonials collection, blocks, and components.  As seen on Journey Into Wellness",
  "dependencies": [
    "@radix-ui/react-avatar",
    "payload",
    "react"
  ],
  "registryDependencies": [
    "button",
    "carousel",
    "avatar",
    "badge",
    "append-keys"
  ],
  "files": [
    {
      "path": "src/collections/Testimonials-1/index.ts",
      "content": "import type { CollectionConfig } from 'payload'\n\nimport { anyone } from '@/access/anyone'\nimport { authenticated } from '@/access/authenticated'\nimport { syncTestimonialsWithPage } from './hooks/syncTestimonialsWithPage'\n\nexport const Testimonials1: CollectionConfig = {\n  slug: 'testimonials1',\n  access: {\n    create: authenticated,\n    delete: authenticated,\n    read: anyone,\n    update: authenticated,\n  },\n  admin: {\n    useAsTitle: 'standout',\n    defaultColumns: ['name', 'offering', 'standout', 'updatedAt'],\n  },\n  fields: [\n    {\n      name: 'standout',\n      type: 'text',\n      required: true,\n    },\n    {\n      name: 'body',\n      type: 'textarea',\n      required: true,\n    },\n    {\n      name: 'offering',\n      type: 'select',\n      hasMany: false,\n      admin: {\n        isClearable: true,\n      },\n      options: [\n        {\n          label: 'Product 1',\n          value: 'product-1',\n        },\n        {\n          label: 'Product 2',\n          value: 'product-2',\n        },\n        {\n          label: 'Product 3',\n          value: 'product-3',\n        },\n      ],\n    },\n    {\n      name: 'author',\n      type: 'group',\n      fields: [\n        {\n          name: 'name',\n          type: 'text',\n          required: true,\n        },\n        {\n          name: 'role',\n          type: 'text',\n          required: true,\n        },\n        {\n          name: 'image',\n          type: 'upload',\n          relationTo: 'media',\n          required: true,\n        },\n      ],\n    },\n    {\n      // hidden but enables you to show the author name in the admin table\n      name: 'name',\n      type: 'text',\n      admin: {\n        hidden: true,\n      },\n      hooks: {\n        beforeChange: [\n          ({ data }) => {\n            return data?.author?.name || ''\n          },\n        ],\n        afterRead: [\n          ({ data }) => {\n            return data?.author?.name || ''\n          },\n        ],\n      },\n    },\n  ],\n  hooks: {\n    afterChange: [syncTestimonialsWithPage],\n  },\n}\n",
      "type": "registry:component",
      "target": "src/collections/Testimonials-1/index.ts"
    },
    {
      "path": "src/collections/Testimonials-1/hooks/syncTestimonialsWithPage.tsx",
      "content": "import { CollectionAfterChangeHook } from 'payload'\n\nexport const syncTestimonialsWithPage: CollectionAfterChangeHook = async ({\n  doc,\n  operation,\n  req,\n}) => {\n  // After any testimonial is created or updated, we need to update all testimonial blocks\n  const payload = req.payload\n\n  // Find all pages that have testimonial blocks\n  const pages = await payload.find({\n    collection: 'pages',\n    depth: 0,\n    where: {\n      'layout.blockType': {\n        equals: 'testimonials1',\n      },\n    },\n  })\n\n  // For each page, get all testimonials and update the testimonials field\n  for (const page of pages.docs) {\n    const allTestimonials = await payload.find({\n      collection: 'testimonials1',\n      depth: 0,\n    })\n\n    // Find testimonial blocks and update their testimonials field\n    if (page.layout) {\n      const updatedLayout = page.layout.map((block) => {\n        if (block.blockType === 'testimonials1') {\n          return {\n            ...block,\n            testimonials: allTestimonials.docs.map((t) => t.id),\n          }\n        }\n        return block\n      })\n\n      // Update the page\n      await payload.update({\n        collection: 'pages',\n        id: page.id,\n        data: {\n          layout: updatedLayout,\n        },\n      })\n    }\n  }\n}\n",
      "type": "registry:hook",
      "target": "src/collections/Testimonials-1/hooks/syncTestimonialsWithPage.tsx"
    },
    {
      "path": "src/blocks/Testimonials-1/config.ts",
      "content": "import type { Block } from 'payload'\n\nexport const Testimonials1: Block = {\n  slug: 'testimonials1',\n  interfaceName: 'Testimonials1Block',\n  fields: [\n    {\n      name: 'heading',\n      type: 'text',\n      required: true,\n      label: 'Section Heading',\n    },\n    {\n      name: 'testimonials',\n      type: 'relationship',\n      relationTo: 'testimonials1',\n      hasMany: true,\n      admin: {\n        // disabled: true,\n        description: 'This field automatically includes all testimonials',\n        hidden: true,\n      },\n    },\n  ],\n}\n",
      "type": "registry:file",
      "target": "src/blocks/Testimonials-1/config.ts"
    },
    {
      "path": "src/blocks/Testimonials-1/Component.tsx",
      "content": "import { cn } from '@/utilities/ui'\nimport React from 'react'\nimport RichText from '@/components/RichText'\n\nimport type { Testimonials1Block as Testimonials1BlockProps } from '@/payload-types'\nimport { TestimonialsCarousel } from '@/components/Testimonials-1'\n\nexport const Testimonials1Block: React.FC<Testimonials1BlockProps> = (props) => {\n  const { heading, testimonials } = props\n\n  return (\n    <>\n      {testimonials && (\n        <div className=\"mx-auto\">\n          <h2 className=\"-mt-6 mb-heading text-center\">{heading}</h2>\n          <TestimonialsCarousel testimonials={testimonials} />\n        </div>\n      )}\n    </>\n  )\n}\n",
      "type": "registry:block",
      "target": "src/blocks/Testimonials-1/Component.tsx"
    },
    {
      "path": "src/components/Testimonials-1/TestimonialsCarousel.tsx",
      "content": "import { Testimonials1 } from '@/payload-types'\nimport { Carousel, CarouselContent, CarouselNext, CarouselPrevious } from '../ui/carousel'\nimport { TestimonialsCard } from './TestimonialsCard'\nimport { appendKeys } from '@/utilities/appendKeys'\nimport type { Testimonials1Block as Testimonials1BlockProps } from '@/payload-types'\n\nexport function TestimonialsCarousel({\n  testimonials: testimonialsProp,\n}: {\n  testimonials: Testimonials1BlockProps['testimonials']\n}) {\n  if (!testimonialsProp) return null\n  const testimonials = appendKeys(testimonialsProp, { shallow: true })\n\n  return (\n    <Carousel\n      opts={{\n        align: 'center',\n        loop: true,\n      }}\n      className=\"w-full\"\n    >\n      <CarouselContent className=\"\">\n        {testimonials.map((testimonial) => {\n          if (typeof testimonial === 'string') return null\n          const { key, ...testimonialProps } = testimonial\n          return (\n            <TestimonialsCard\n              key={key}\n              testimonial={testimonialProps}\n              className=\"basis-[calc(100%-1.175*2rem)] pl-4 md:basis-[45%] md:pl-8 lg:basis-[29%]\"\n            />\n          )\n        })}\n      </CarouselContent>\n\n      <div className=\"mt-8 flex justify-center gap-2\">\n        <CarouselPrevious className=\"static mr-2 translate-y-0 transform-none border-primary p-0 [&_*]:stroke-primary\" />\n        <CarouselNext className=\"static translate-y-0 transform-none border-primary p-0 [&_*]:stroke-primary\" />\n      </div>\n    </Carousel>\n  )\n}\n",
      "type": "registry:component",
      "target": "src/components/Testimonials-1/TestimonialsCarousel.tsx"
    },
    {
      "path": "src/components/Testimonials-1/TestimonialsCard.tsx",
      "content": "import { Avatar, AvatarImage, AvatarFallback } from '@radix-ui/react-avatar'\n\nimport { CarouselItem } from '@/components/ui/carousel'\nimport { cn } from '@/utilities/ui'\nimport { ImageMedia } from '@/components/Media/ImageMedia'\nimport { Media } from '@/components/Media'\nimport { Badge } from '@/components/ui/badge'\nimport { Testimonials1 } from '@/payload-types'\n\nexport function TestimonialsCard({\n  testimonial,\n  className,\n}: {\n  testimonial: Testimonials1\n  className: string\n}) {\n  const { standout, body, offering } = testimonial\n  const { name, role, image } = testimonial.author\n  return (\n    <CarouselItem key={testimonial.id} className={cn(className, 'text-primary')}>\n      <div className=\"flex h-full flex-col overflow-hidden rounded-[2rem] bg-primary-50 p-7\">\n        <div className=\"\">\n          <h3 className=\"\">&ldquo;{standout}&rdquo;</h3>\n          <p className=\"type-caption mt-4 max-w-[48ch] !font-light opacity-65\">{body}</p>\n        </div>\n\n        <div className=\"mt-auto flex items-end justify-between pt-4\">\n          <div className=\"flex items-center gap-4\">\n            <Avatar className=\"relative size-10 overflow-hidden rounded-full\">\n              <Media className=\"\" fill priority resource={image} />\n              <AvatarFallback>{name.charAt(0)}</AvatarFallback>\n            </Avatar>\n            <div>\n              <p className=\"type-caption font-normal\">{name}</p>\n              <p className=\"type-caption font-normal opacity-65\">{role}</p>\n            </div>\n          </div>\n\n          {offering && <Badge variant=\"primary\">{offering}</Badge>}\n        </div>\n      </div>\n    </CarouselItem>\n  )\n}\n",
      "type": "registry:component",
      "target": "src/components/Testimonials-1/TestimonialsCard.tsx"
    },
    {
      "path": "src/components/Testimonials-1/index.tsx",
      "content": "export * from './TestimonialsCard'\nexport * from './TestimonialsCarousel'\n",
      "type": "registry:file",
      "target": "src/components/Testimonials-1/index.tsx"
    }
  ],
  "docs": "Cursor instructions: \n1. Visit src/collections/Pages/index.ts and add 'import { Testimonials-1 } from '@/blocks/Testimonials-1/config'. Then, add Testimonials-1 into the list of blocks found at Pages.fields[1].tabs[1].fields[0].blocks. \n2. Visit src/blocks/RenderBlocks.tsx and add `Testimonials1Block: Testimonials-1` to the blockComponents object. \n3. Run 'npx payload generate:types'. \n4. (Optional) Run 'tsc --build' to ensure everything looks good in regards to Testimonials-1, and Testimonials1Block.",
  "categories": [
    "blocks",
    "testimonials"
  ]
}